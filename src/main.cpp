// main.cpp
#include "Lexer.h"
#include "Parser.h"
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <stdexcept>
#include <cstdio>
#include <memory>
#include <array>

std::string readFileToString(const std::string &filename) {
  std::string cmd = "gcc -E -P " + filename; // or "clang -E -P " + filename
  std::array<char, 128> buffer;
  std::string result;

  std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(cmd.c_str(), "r"), pclose);
  if (!pipe) throw std::runtime_error("popen() failed!");

  while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
    result += buffer.data();
  }

  return result;
}


int main(int argc, char *argv[]) {

  if (argc < 2) {
    std::cout << "Need filepath." << std::endl;
    return 1;
  }

  std::string sourceCodeFilepath = argv[1];

  std::string sourceCode = readFileToString(sourceCodeFilepath);
  Lexer lexer(sourceCode);
  std::vector<Token> tokens = lexer.tokenize();

  std::cout << "Source code: " << sourceCode << std::endl << std::endl;
  std::cout << "Tokens Generated by Lexical Analyzer:" << std::endl;
  printTokens(tokens);

  parse(tokens);

  return 0;
}
